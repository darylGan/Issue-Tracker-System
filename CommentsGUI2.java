
import classes.Comment;
import classes.Issue;
import classes.Project;
import classes.Reactions;
import classes.User;
import database.CommentQuery;
import database.IssueQuery;
import database.ProjectQuery;
import database.ReactionQuery;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Daryl Gan
 */
public class CommentsGUI2 extends javax.swing.JFrame {
    
    protected static Scanner sc = new Scanner(System.in);

    protected static String opr;

    protected static User currentUser = new User( 4, "shawn", "shawn@gmail.com", "SHAWN" );

    protected static Project[] projects;
    protected static int selected_Project_ID;
    protected static Project currrentProject;

    protected static Issue[]   issues;
    protected static int selected_Issue_ID;
    protected static Issue currentIssue;

    /**
     * Creates new form CommentsGUI2
     */
    public CommentsGUI2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtComments = new javax.swing.JTextArea();
        jbBack = new javax.swing.JButton();
        jbAddComment = new javax.swing.JButton();
        jbAddReaction = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Issue Tracker System - Comment Page");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4), "Comments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 24))); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(600, 350));

        jtComments.setColumns(20);
        jtComments.setRows(5);
        jScrollPane2.setViewportView(jtComments);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 550, 300));
        jPanel2.getAccessibleContext().setAccessibleName("Issue Tracker System - Issue Page");

        jbBack.setText("Back");
        jbBack.setMargin(new java.awt.Insets(2, 10, 2, 10));
        jbBack.setMaximumSize(new java.awt.Dimension(65, 25));
        jbBack.setMinimumSize(new java.awt.Dimension(65, 25));
        jbBack.setPreferredSize(new java.awt.Dimension(65, 25));
        jbBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBackActionPerformed(evt);
            }
        });
        getContentPane().add(jbBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 80, -1));

        jbAddComment.setText("<html>Add<br>Comment</html>");
        jbAddComment.setMargin(new java.awt.Insets(2, 10, 2, 10));
        jbAddComment.setMaximumSize(new java.awt.Dimension(65, 25));
        jbAddComment.setMinimumSize(new java.awt.Dimension(65, 25));
        jbAddComment.setPreferredSize(new java.awt.Dimension(65, 25));
        jbAddComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddCommentActionPerformed(evt);
            }
        });
        getContentPane().add(jbAddComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 100, 40));

        jbAddReaction.setText("<html>Add<br>Reaction</html>");
        jbAddReaction.setMargin(new java.awt.Insets(2, 10, 2, 10));
        jbAddReaction.setMaximumSize(new java.awt.Dimension(65, 25));
        jbAddReaction.setMinimumSize(new java.awt.Dimension(65, 25));
        jbAddReaction.setPreferredSize(new java.awt.Dimension(65, 25));
        jbAddReaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddReactionActionPerformed(evt);
            }
        });
        getContentPane().add(jbAddReaction, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 330, 100, 40));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbAddReactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddReactionActionPerformed
//testing
        try {
        selected_Project_ID = 1;
        currrentProject     = ProjectQuery.getProject(selected_Project_ID);
        }
        catch (SQLException | ClassNotFoundException a){
            
        }
        
        try {
        selected_Issue_ID   = 1;
        currentIssue        = IssueQuery.getIssue( selected_Issue_ID );
        }
        catch (SQLException | ClassNotFoundException a){
            
        }
       
        int currentUserID = 6;
        int creatorID     = 6;
        int assigneeID    = 7;
//testing        
        
        String[] reactions = {"LIKE", "LOVE", "HAHA", "WOW", "SAD", "ANGRY"};
        String commentIndex;
        
            commentIndex = (String)JOptionPane.showInputDialog(
                    this,
                    "Choose comment to react: ",
                    "Comment Selection",
                    JOptionPane.PLAIN_MESSAGE
            );
            
            int index = Integer.parseInt(commentIndex)-1;

            if (isNumber(commentIndex) && index>=0 && index<currentIssue.getComments().length) {
                Comment currentComment = currentIssue.getComments()[index];
                        
                String reaction = (String)JOptionPane.showInputDialog(
                        this,
                        "Choose reaction to current comment: ",
                        "Reaction Change",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        reactions,
                        reactions[0]           
                );

                JOptionPane.showMessageDialog(
                        this,
                        "You have changed your reaction to: " + reaction,
                        "Reaction Changed",
                        JOptionPane.INFORMATION_MESSAGE
                );

                try {
                    ReactionQuery.updateReaction( currentUser.getUserID(), currentComment.getCommentID(), reaction );

                    currrentProject = ProjectQuery.getProject(selected_Project_ID);
                    currentIssue = IssueQuery.getIssue(selected_Issue_ID);
                }
                catch (SQLException | ClassNotFoundException a){

                }
            }
            else {
                JOptionPane.showMessageDialog(
                    this,
                    "Invalid comment selected!",
                    "Comment Selection Error",
                    JOptionPane.WARNING_MESSAGE
                );
            }
            
            jtComments.setText("");
            display();
    }//GEN-LAST:event_jbAddReactionActionPerformed
    
    protected static boolean isNumber(String input) {
        try{
            Integer.parseInt(input);
            return true;
        }
        catch (NumberFormatException e){
            return false;
        }
    }
    
    private void jbAddCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddCommentActionPerformed
//testing
        try {
        selected_Project_ID = 1;
        currrentProject     = ProjectQuery.getProject(selected_Project_ID);
        }
        catch (SQLException | ClassNotFoundException a){
            
        }
        
        try {
        selected_Issue_ID   = 1;
        currentIssue        = IssueQuery.getIssue( selected_Issue_ID );
        }
        catch (SQLException | ClassNotFoundException a){
            
        }
       
        int currentUserID = 6;
        int creatorID     = 6;
        int assigneeID    = 7;
//testing        
        
        String comment = (String)JOptionPane.showInputDialog(
            this,
            "Enter your comment: ",
            "Comment Addition",
            JOptionPane.PLAIN_MESSAGE
        );
        
        if(comment == null || (comment != null && ("".equals(comment))))   
            return;
        
        JOptionPane.showMessageDialog(
             this,
             "You have added a comment on the current issue: \"" + comment + "\"" ,
             "Comment Added",
             JOptionPane.INFORMATION_MESSAGE
        );
        
        comment += "\n";
        
        try {
            Comment newComment = new Comment(0, currentIssue.getIssueID(), currentUser, new Timestamp(new Date(System.currentTimeMillis()).getTime()), comment, new Reactions(0,0,0,0,0,0));
            CommentQuery.insertNewComment( newComment );

            currrentProject = ProjectQuery.getProject(selected_Project_ID);
            currentIssue = IssueQuery.getIssue(selected_Issue_ID);
        }
        catch (SQLException | ClassNotFoundException a){
            
        }
        
        jtComments.setText("");
        display();
    }//GEN-LAST:event_jbAddCommentActionPerformed

    private void jbBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBackActionPerformed
        IssuePageGUI issue = new IssuePageGUI();
        issue.setVisible(true);
        dispose();
        
        issue.display();
    }//GEN-LAST:event_jbBackActionPerformed
    
    void display() {
//testing
        try {
        selected_Project_ID = 1;
        currrentProject     = ProjectQuery.getProject(selected_Project_ID);
        }
        catch (SQLException | ClassNotFoundException a){
            
        }
        
        try {
        selected_Issue_ID   = 1;
        currentIssue        = IssueQuery.getIssue( selected_Issue_ID );
        }
        catch (SQLException | ClassNotFoundException a){
            
        }
       
        int currentUserID = 6;
        int creatorID     = 6;
        int assigneeID    = 7;
//testing        
        
        StringBuilder sb = new StringBuilder("");
        Comment[] comments = currentIssue.getComments();
        for (int i = 0; i < comments.length; i++)
            sb.append( String.format("#%d      %s", (i+1), comments[i].toString()) );

        jtComments.append(sb.toString());
        jtComments.setEditable(false);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CommentsGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CommentsGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CommentsGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CommentsGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CommentsGUI2 commt = new CommentsGUI2();
                commt.setVisible(true);
                commt.display();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAddComment;
    private javax.swing.JButton jbAddReaction;
    private javax.swing.JButton jbBack;
    private javax.swing.JTextArea jtComments;
    // End of variables declaration//GEN-END:variables
}
