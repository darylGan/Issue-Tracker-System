# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather( class, grade, class1:class5 , na.rm= TRUE) %>%
print
submit()
?spread
play()
?spread
nxt()
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread( test, grade) %>%
print
submit(*)
submit()
library(readr)
parse_number('class5')
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate( class = parse_number(class))
submit()
submit()
?parse_number
parse_number(students$class)
parse_number( students3$class1)
parse_number( students3$class1, na.rm = T)
nxt(0)
nxt()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate( class = parse_number(.$class))
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate( class = parse_number(class))
submit()
submit()
submit()
students4
submit()
student_info
#
student_info <-
students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique()
print
student_info <-
students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique() %>%
print
?unique
submit()
play()
students4 %>%
)
student-info <-
students4 %>%
select( id, name, sex) %>%
unique()
student-info <-
students4 %>%
select( id, name, sex) %>%
unique()
student_info <-
students4 %>%
select( id, name, sex) %>%
unique()
student_info
nxt()
submit()
submit()
play()
?unique
nxt()
passed
failed
passed <- passed %>% mutate(status = 'passed')
failed <- failed %>% mutate(status = 'failed')
play()
passed
failed
nxt()
bind_rows( passed, failed)
sat
sat
View(sat)
sat %>%
select( !contains('total'))
sat %>%
select( !contains('total'))
sat %>%
select( !contains('total'))
gather( part, sex, -score_range)
sat %>%
select( !contains('total'))
gather( key=part_sex, value=count, -score_range)
sat %>%
select( !contains('total'))
sat %>%
select( !contains('total')) %>%
gather( key=part_sex, value=count, -score_range)
?separate
sat %>%
select( !contains('total')) %>%
gather(   key=part_sex, value=count, -score_range) %>%
separate( col=part_sex, into=c('part', 'sex'))
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by( part, sex)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by( part, sex) %>%
mutate( total = sum(count), prop = count/total)
submit()
?strsplit
?str_replace
str_replace
library(stringr)
?str_replace
?str_replace_na
?sub
?grep
?grep
?grepl
?grep
library(stringr)
?str_replace
str_replace_na(c(NA, "abc", "def"))
swirl()
library(swirl)
siwrl()
swirl(0)
uninstall_course(Manipulating Data with dplyr))
uninstall_course('Grouping and Chaining with dplyr')
uninstall_course('uninstall_course(course_name)')
uninstall_course('Grouping and Chaining with dplyr')
swirl()
uninstall_course('Manipulating Data with dplyr')
uninstall_course('R Programming')
uninstall_course('Tidying Data with tidyr')
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
play()
year(this_day)
month(this_day)
day(this_day)
typeof(year(this_day))
nxt()
wday()
wday(this_day)
wday(this_day, label = TRUE)
now9)
now()
this_moment <- now()
this_moment
play()
second(this_moment)
minute(this_moment)
hour(this_moment)
typeof(hour(this_moment))
nxt()
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(ny_date)
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
dmy("1-9-2012")
ymd(1920-1-2)
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
this_moment <- update( this_moment, hours=8, minutes=34, seconds=55)
update( this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- update(this_moment, hours=10, minutes=35)
this_moment
?out
?now
nyc <- now(tzone='America/New_York')
nys
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
play()
depart <- nyc + days(2)
depart
nxt()
arrive <- depart + hours(15) + minutes(50)
play()
arrive <- depart + hours(15) + minutes(50)
arrive
nxt()
?with_tz
with_tz( arrive, 'Asia/Hong_Kong')
with_tz( arrive, tzone='Asia/Hong_Kong')
arrive <- with_tz( arrive, tzone='Asia/Hong_Kong')
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval( arrive, last_time)
how_long <- interval( last_time, arrive)
as.period(how_long)
stopwatch()
?table
data.frame( tested_positive = c(120,10), tested_negative = c(15,50))
df = data.frame( pred_positive = c(120,10), pred_negative = c(15,50))
row.names.data.frame(df) = c( "actual_positive", "actual_negative")
df
View(df)
View(df)
row.names(df)
row.names(df) = c( "actual_positive", "actual_negative")
df
tdf = table(df)
tdf
table(df)
library(dplyr)
df1 = read.csv('student list 1.csv', header=T)
print(df1)
# i
df1 =
df1 %>%
rename(Gender = Sex)
print(df1)
# ii
df1 %>%
filter( Gender == 'F', startsWith("S"))
library(dplyr)
df1 = read.csv('student list 1.csv', header=T)
print(df1)
# i
df1 =
df1 %>%
rename(Gender = Sex)
print(df1)
# ii
df1 %>%
filter( Gender == 'F', startsWith( Name, "S"))
# iii
df1 =
df1 %>%
mutate( Grade = rep(c('A','B'),5), )
print(df1)
# iv
df2 = read.csv('student list 2.csv', header=T)
print(df2)
all = full_join( df1, df2)
print(all)
library(mtcars)
mtcars
?density
install.packages("EnvStats")
library(EnvStats)
epdfPlot( mtcars$mpg, epdf.col = "red")
?epdfPlot
library("dplyr")
people <- read.csv("sample1.csv")
#look at our data set
people
names(people)
people =
people %>%
rename( height_cm = Height, weight_kg = Weight)
print(people)
#add a new column name 'height_m'
people =
people %>%
mutate( height_m = height_cm/100.0)
print(people)
#add a new column name 'height_m'
people =
people %>%
mutate( height_m = height_cm/100.0, BMI = weight_kg / (height_m^2))
print(people)
str(USArrests)
library(memisc)
codebook(USArrests)
#add a new column name 'height_m'
people =
people %>%
mutate( height_m = height_cm/100.0, BMI = weight_kg / (height_m^2))
people <- read.csv("sample1.csv")
#look at our data set
people
names(people)
people =
people %>%
rename( height_cm = Height, weight_kg = Weight)
print(people)
filter(people, Gender == "female")
#add a new column name 'height_m'
people =
people %>%
mutate( height_m = height_cm/100.0, BMI = weight_kg / (height_m^2))
`rlang::last_error()
``
``
rlang::last_error()
#add a new column name 'height_m'
people =
people %>%
mutate( height_m = height_cm/100.0, BMI = weight_kg / (height_m^2))
people <- read.csv("sample1.csv")
#look at our data set
people
names(people)
people <-
people %>%
rename( height_cm = Height, weight_kg = Weight)
print(people)
people <-
people %>%
rename( height_cm = Height, weight_kg = Weight)
print(people)
filter(people, Gender == "female")
#add a new column name 'height_m'
people =
people %>%
mutate( height_m = height_cm/100.0, BMI = weight_kg / (height_m^2))
install.packages('datamaid')
install.packages('dataMaid')
?unloadNamespace
install.packages('ggcorrplotcorr')
install.packages('ggcorrplot')
library(ggcorrplot)
ggcorrplot(ChickWeight)
library(ggcorrplot)
corrplot(ChickWeight)
library(corrplot)
corrplot(ChickWeight)
library(corrplot)
corrplot(ChickWeight, is.corr = FALSE)
library(corrplot)
corrplot(cor(ChickWeight), method = "color")
cor(ChickWeight)
?cor
glimpse(ChickWeight)
library(dplyr)
library(corrplot)
cor(ChickWeight)
glimpse(ChickWeight)
cor(ChickWeight[, unlist(lapply(ChickWeight, is.numeric))])
library(corrplot)
c = cor( ChickWeight %>% select( weight, Time) )
corrplot(c, method = "color")
ggplot(data = ChickWeight, aes(x=Diet, y=weight)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
boxplot(ChickWeight, main = "ChickWeight Data", xlab="Diet", ylab = "weight", col = "orange");
boxplot(ChickWeight,  xlab="Diet", ylab = "weight", col = "orange");
library(corrplot)
# c = cor( ChickWeight %>% select( weight, Time) )
c = cor(ChickWeight[, unlist(lapply(ChickWeight, is.numeric))])
corrplot(c, method = "color")
library(corrplot)
c = cor( ChickWeight %>% select( weight, Time) )
# c = cor(ChickWeight[, unlist(lapply(ChickWeight, is.numeric))])
corrplot(c, method = "color")
library(corrplot)
c = cor(ChickWeight[, unlist(lapply(ChickWeight, is.numeric))])
corrplot(c, method = "color")
ggplot(ChickWeight, aes(x = Diet, y = weight)) +
geom_boxplot()
ggplot(ChickWeight, aes(x = Diet, y = weight, fill = Diet)) +
geom_boxplot( outlier.colour="red", )
ggplot(data = ChickWeight) +
geom_point(mapping = aes(x=Time, y=weight, colour=Diet))
ggplot(ChickWeight, aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot( outlier.colour="red" )
ggplot(data = ChickWeight) +
geom_line(mapping = aes(x=Time, y=weight, colour=Diet))
ggplot(data = ChickWeight) +
geom_line(aes(x=Time, y=weight, colour=Diet))
ggplot(data = ChickWeight) +
geom_point(mapping = aes(x=Time, y=weight, colour=Diet))
ggplot(ChickWeight) +
geom_line(aes(x=Time, y=weight, colour=Diet, group=Chick))
ggplot(ChickWeight) +
geom_line(aes(x=Time, y=weight, colour=Diet, group=Chick))
ggplot(ChickWeight) +
geom_line(aes(x=Time, y=weight, colour=Diet, group=Chick))
?geom_line
library(memisc)
codebook(ChickWeight)
library(memisc)
codebook(ChickWeight)
# library(memisc)
# codebook(ChickWeight)
library(dataMaid)
makeCodebook(ChickWeight)
# library(memisc)
# codebook(ChickWeight)
library(dataMaid)
makeCodebook(ChickWeight)
?codebook
codebook(ChickWeight)
ggplot(ChickWeight, aes(x=Diet, y=weight, fill=Diet)) +
geom_boxplot( outlier.colour="red" )
library(memisc)
codebook(ChickWeight)
typeof(ChickWeight)
data.frame(ChickWeight)
library(memisc)
codebook(data.frame(ChickWeight))
# library(dataMaid)
# makeCodebook(ChickWeight)
detach("package:memisc")
# Close the pdf file
dev.off()
# 2. Create a plot
plot(x = my_data$wt, y = my_data$mpg,
pch = 16, frame = FALSE,
xlab = "wt", ylab = "mpg", col = "#2E9FDF")
# install.packages("Rserve")
library("Rserve")
Rserve() #windows
library("Rserve")
Rserve() #windows
unloadNamespace("Rserve")
library("Rserve")
Rserve() #windows
library('rJava')
setwd('C:/Users/lohye/Documents/GitHub/-Issue-Tracker-System/Rscript/')
gwtwd()
getwd()
install.packages('RMySQl')
install.packages('RMySQL')
library('RMySQL')
setwd('C:/Users/lohye/Documents/GitHub/-Issue-Tracker-System/Rscript')
?dbConnect
con <- dbConnect( RMySQL::MySQL(),
dbname = "issue_tracker_system",
user = "root",
password = "wix1002"
)
con <- dbConnect( RMySQL::MySQL(),
dbname = "issue_tracker_system",
user = "root",
password = "wix1002",
host = "localhost"
)
?dbConnect
con <- dbConnect( RMySQL::MySQL(),
dbname = "issue_tracker_system",
user = "root",
password = "wix1002",
host = "127.0.0.1",
port = "3306"
)
con <- dbConnect( RMySQL::MySQL(),
dbname = "issue_tracker_system",
user = "root",
password = "wix1002",
host = "127.0.0.1",
port = 3306
)
con <- dbConnect( RMySQL::MySQL(),
dbname = "issue_tracker_system",
user = "root",
password = "wix1002",
host = "127.0.0.1",
port = 3306
)
